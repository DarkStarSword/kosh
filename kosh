#!/usr/bin/env python3
# vi:sw=2:ts=2:expandtab

# Copyright (C) 2009-2021 Ian Munsie
#
# Kosh is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Kosh is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Kosh.  If not, see <http://www.gnu.org/licenses/>.

def disable_ptrace():
  # This prevents the opportunistic attack whereby someone notices kosh left
  # running on an unattended workstation and runs gcore to extract passwords
  # from memory while the owner is distracted. Consider settings such as
  # university computer labs where this sort of attack may take place.
  #
  # This will also boot out an already attached debugger, but this is *NOT*
  # trying to mitigate any attacks involving that avenue, since an existing
  # debugger could easily skip over the prctl call and there's nothing we can
  # really do to stop it. However, such an attack requires advance preparation
  # - it is not opportunistic, and if your threat model includes such an
  # adversary than your only defence is to ensure that they never gain access
  # your workstation to prepare this or any other attack in the first place.
  #
  # Likewise, this does not prevent the root user from reading passwords out of
  # memory - if your adversary has root, you are already owned.
  import ctypes, ctypes.util
  libc = ctypes.CDLL(ctypes.util.find_library('c'))
  PR_SET_DUMPABLE = 4
  try:
    libc.prctl(PR_SET_DUMPABLE, 0, 0, 0, 0)
  except AttributeError: # Not Linux
    pass
disable_ptrace()

passdb_default = '~/.kosh/koshdb'

urwid_req_version = '0.9.9.1' # Fixme: what version is actually required?

import version
__version__ = version.__version__
version.checkCrypto()
version.checkUrwid(urwid_req_version)

from util.decorators import *
import koshcurses.err
import koshcurses.dialog
import koshcurses.ui

def getParameters():
  import optparse
  usage = 'usage: %prog [passdb]'
  parser = optparse.OptionParser(usage=usage, version="%%prog %s" % __version__)
  # No non positional options just yet...
  (options, args) = parser.parse_args()

  # argparse from python2.7 would be nice, but I need to support older versions for now
  if len(args):
    options.passdb = args.pop(0)
  else:
    options.passdb = passdb_default

  if len(args):
    parser.error('Too many arguments')
  return options

@handleErr(koshcurses.err.showErr)
def main():
  import koshdb,os
  options = getParameters()
  def prompt(message):
    dialog = koshcurses.dialog.inputDialog(message=message)
    return dialog.showModal()
  try:
    db = koshdb.KoshDB(os.path.expanduser(options.passdb), prompt)
  except koshdb.koshdb.FileLocked:
    print('Password database locked by another instance of kosh')
    return
  u = koshcurses.ui.koshUI(db)
  u.showModal()

if __name__ == '__main__':
  main()
